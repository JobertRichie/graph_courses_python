# Imports

```{python}
import pandas as pd
import plotly.express as px
```
# Data

```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

# When to use wide or long data

- Wide format is typically to display information
- Long format is typically for analysis or plotting

# From wide to long with melt()

```{python}
fuels_wide
```

```{python}
fuels_wide.melt(
    id_vars = ["Entity", "Code"]
).sort_values(["Entity", "variable"])
``` 
```{python}
fuels_long = fuels_wide.melt(
    id_vars = ["Entity", "Code"],
    var_name = "year",
    value_name = "oil_consumption"
).sort_values(["Entity", "year"])
fuels_long
```

```{python}
fuels_long["year"] = fuels_long["year"].str.replace("y_", "").astype(int)
fuels_long
```

## Practice question 1: Temperatures to long
Convert the temperatures dataset shown below into a long format. Your answer should have the following column
names: “country”, “year”, and “avg_temp”.

```{python}
temperatures
```

```{python}
temperatures_long = temperatures.melt(
    id_vars = "country",
    var_name = "year",
    value_name = "avg_temp"
)
temperatures_long
```

## Practice question 2: Eurostat Births to long
For this practice question, you will use the euro_births_wide dataset from Eurostat. It shows the annual number of births in 50 European countries. The data is in a wide format. Convert it to a long format DataFrame that has the following column names: “country”, “year”, and “births_count”.
Remove the x prefix from the year columns and convert them to integers.

```{python}
euro_births_long = euro_births_wide.melt(
    id_vars = "country",
    var_name = "year",
    value_name = "briths_count"
).sort_values(["country", "year"])
euro_births_long
```

```{python}
euro_births_long["year"] = euro_births_long["year"].str.replace("x", "").astype(int)
euro_births_long
```
# Using long data for analysis

```{python}
fuels_wide
#Easy to compare multiple dates for multiple countries
```

```{python}
fuels_long
```
Long data easy to extract statistics
```{python}
#avearage oil consumption per country
fuels_long.groupby("Entity")["oil_consumption"].mean()
```
Wide data not so much
```{python}
fuels_wide[["y_1970", "y_1980", "y_1990", "y_2000", "y_2010", "y_2020"]].mean(axis=1)
#information on entity (country) is lost
```
Long data easier to plot

```{python}
subset = fuels_long.query("Entity in ['Peru', 'Iran', 'China']")
subset
```

```{python}
px.line(subset, x = "year", y = "oil_consumption", color = "Entity")
```

# From long to wide with pivot()

```{python}
#Number of contracts per state per year
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index()
contracts_summary
```

```{python}
#Conversion from long to wide
contracts_summary_wide = contracts_summary.pivot(
    columns = "year",
    index = "state",
    values = "count"
).reset_index()
contracts_summary_wide
```

```{python}
# What if we want to have each state in their own columns
contracts_summary_wide2 = contracts_summary.pivot(
    columns="state", index="year", values="count"
).reset_index()
contracts_summary_wide2
```

## Practice question 3: Temperatures back to wide
Convert the long temperatures_long dataset you created above back to a wide format. Your answer should have the following column names: “country”, “1994”, “1995”, and “1996”.

```{python}
temperatures_wide = temperatures_long.pivot(
    columns = "year",index = "country", values = "avg_temp"
).reset_index()

temperatures_wide
```
## Practice question 4: Population to wide
The population dataset shows the populations of 219 countries over time. Reshape this data into a wide format.

```{python}
population
```

```{python}
population_wide = population.pivot(
    columns = "year",index = "country", values = "population"
).reset_index()

population_wide
```