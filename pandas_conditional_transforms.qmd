# Imports

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd 
import plotly.express as px
```
# Intro to replace

```{python}
tips = px.data.tips()
tips
tips["day"].value_counts()
```

```{python}
day_mapping = {
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
}
```

```{python}
tips["day"].replace(day_mapping)
```

```{python}
tips["day_full"] = tips["day"].replace(day_mapping)
tips
```

```{python}
#replacing the days without creating the intermediate day_mapping dictionary
tips["day_full"] = tips["day"].replace({
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
})
tips
```

```{python}
# Practice question
## Using the "tips" dataset replace the values in the "sex" column to abbreviate gender:
### - Replace "Female" with "F";
### -Replace "Male" with "M";## Assign the result to a new column called 'sex_abbr' and display the first fex rows
```

```{python}
sex_mapping = {
    "Female": "F",
    "Male": "M"
}

tips["sex_abbr"] = tips["sex"].replace(sex_mapping)

tips["sex_abbr"].head(10)
```

# Handling missing values with replace

```{python}
movies = vd.data.movies()
movies
```

```{python}
movies["Creative_Type"].value_counts(dropna = False)
```

```{python}
movies["Creative_Type"].replace({None: "Unknown/Unclear"})
```

```{python}
#Replacing None values with a string
movies["Creative_Type"] = movies["Creative_Type"].replace({None: "Unknown/Unclear"})
movies["Creative_Type"].value_counts(dropna = False)
```

```{python}
#Replacing NaN values with a number
movies["US_DVD_Sales"].tail(10)
```

```{python}
movies["US_DVD_Sales"].replace({np.nan: 0}).tail(10)
```

```{python}
movies["US_DVD_Sales_n"] = movies["US_DVD_Sales"].replace({np.nan: 0})
movies["US_DVD_Sales_n"].tail(10)
```

```{python}
# Practice question
## In the "movies" dataset, the "MPAA_Rating" column contains movie ratings. Some entries are None or 'Not Rated'. Replace both entries with 'unrated'. Then use 'value_counts' to see how many movies are unrated. There should be 699 movies in this category
```

```{python}
rating_dic = {
    None: "Unrated",
    "Not Rated": "Unrated"
}
movies["new_rating"] = movies["MPAA_Rating"].replace(rating_dic)

movies["new_rating"].value_counts()
```

# Categorizing numeric data with custom functions

```{python}
#Categorize the "US_Gross" variable as follows:
### If the value is less than 10 mil, "Low"
### If the value is between 10 and 50 mil, "Medium"
### If the value is greater than 50 mil, "High"
```

```{python}
def categ_gross(cat):
    if cat < 10000:
        return "Low"
    elif 10000 <= cat <= 50000:
        return "Medium"
    elif cat > 50000:
        return "High"
    else:
        return "Missing"
categ_gross(45000)
```

```{python}
#Vectorization
categ_gross_vec = np.vectorize(categ_gross)
```

```{python}
movies["US_Gross_cat"] = categ_gross_vec(movies["US_Gross"])
movies["US_Gross_cat"].head(10)
```

# Complex trasformations with custom functions

For example, suppose we want to flag superhero movies as “US action movie” or “Global action movie” based
on their US and worldwide gross earnings.
- For Super Hero movies, if the US gross and worldwide gross are the same (indicating sales were only in the
US), the movie is flagged as a US action movie.
- For Super Hero movies, if the worldwide gross is greater than the US gross, the movie is flagged as a
global action movie.
- For all other movies, we leave the flag blank

We can define a funcion that takes in three arguments and returns the appropriate flag

```{python}
def flag_movie(movie_type, us, worldwide):
    if movie_type == "Super Hero" and us == worldwide:
        return 'US Action Movie'
    elif movie_type == "Super Hero" and worldwide > us:
        return "Global Action Movie"
    else:
        return None
```

```{python}
print(flag_movie(movie_type = "Super Hero",
us = 100,
worldwide = 100))

print(flag_movie(movie_type = "Super Hero",
us = 100,
worldwide = 200))


print(flag_movie(movie_type = "Comedy",
us = 100,
worldwide = 200))
```

```{python}
#Vectorization
flag_movie_vec = np.vectorize(flag_movie)

movies["Action_flag"] = flag_movie_vec(
    movie_type = movies["Creative_Type"],
    us = movies["US_Gross"],
    worldwide = movies["Worldwide_Gross"]
)
movies["Action_flag"].value_counts()
```


```{python}
# Practice question
## In the movies dataset, flag movies as Critic-friendly or Commercial based on their Rotten Tomatoes and IMDB ratings.
### If the Rotten Tomatoes rating is above 70% and the IMDB rating is below 5, the movie is flagged as Criticfriendly.
### If the Rotten Tomatoes rating is below 50% and the IMDB rating is above 7, the movie is flagged as Commercial.
### Otherwise, the movie is categorized as Other.
### Count how many movies are Critic-friendly and Commercial. There should be 13 Critic-friendly movies and 33 Commercial movies. Do you recognize any of them?
```

```{python}
def critic_movie(rotten, imdb):
    if rotten > 70 and imdb < 5:
        return "Critic friendly"
    elif rotten < 50 and imdb > 7:
        return "Commercial"
    else:
        return None

critic_movie_vec = np.vectorize(critic_movie)
```

```{python}
movies
```
```{python}
movies['critic_category'] = critic_movie_vec(
    rotten = movies["Rotten_Tomatoes_Rating"],
    imdb = movies["IMDB_Rating"]
)
movies['critic_category'].value_counts()
```